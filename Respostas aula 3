1. Dada uma variável 'a' do tipo 'char' (um byte), escreva os trechos de código em C para:
	(a) Somente setar o bit menos significativo de 'a'.
		a | = 0x01
	(b) Somente setar dois bits de 'a': o menos significativo e o segundo menos significativo.
		a | = 0x03
	(c) Somente zerar o terceiro bit menos significativo de 'a'.
		a &= 0x0B
	(d) Somente zerar o terceiro e o quarto bits menos significativo de 'a'.
		a & = 0x03
	(e) Somente inverter o bit mais significativo de 'a'.
		a ^ = 0x80
	(f) Inverter o nibble mais significativo de 'a', e setar o nibble menos significativo de 'a'. 
		a ^ = 0xF0
		a | = 0x0F

2. Considerando a placa Launchpad do MSP430, escreva o código em C para piscar os dois LEDs ininterruptamente.
	# Incluem  < msp430g2553.h >
	# Define  LED1 BIT0
	# Define  LED2 BIT6
	
	Void  main ( void )
	{
		WDTCTL = WDTPW | WDTHOLD;
		P1DIR = LED1 + LED2;
		P1OUT = 0 ;
		Para (;;)
		{
			P1OUT | = LED1 + LED2;
			P1OUT & = ~ (LED1 + LED2);
		}
	};
3. Considerando a placa Launchpad do MSP430, escreva o código em C para piscar duas vezes os dois LEDs sempre que o usuário pressionar o botão.
# Incluem  < msp430g2553.h >
	# Define  BTN BIT2
	# Define  LED1 BIT0
	# Define  LED2 BIT6
	
	Void  main ( void )
	{
		WDTCTL = WDTPW | WDTHOLD;
		P1DIR = LED1 + LED2;
		P1OUT = 0 ;
		Para (;;)
		{
			se (P1IN & BTN == 0 ) 
			{
				P1OUT | = LED1 + LED2;
				P1OUT & = ~ (LED1 + LED2);
				
				P1OUT | = LED1 + LED2;
				P1OUT & = ~ (LED1 + LED2); 
				
				Enquanto (P1IN & BTN == 0 ) {} 
			}
			outro
				P1OUT & = ~ (LED1 + LED2); 
		}
	};
4. Considerando a placa Launchpad do MSP430, faça uma função em C que pisca os dois LEDs uma vez.
anular  Pisca2 ()
	{
		P1OUT | = LED1 + LED2;
		P1OUT & = ~ (LED1 + LED2); 
		
		P1OUT | = LED1 + LED2;
		P1OUT & = ~ (LED1 + LED2); 
	}
5. Reescreva o código da questão 2 usando a função da questão 4.
# Incluem  < msp430g2553.h >
	# Define  LED1 BIT0
	# Define  LED2 BIT6
	
	anular  Pisca2 ()
	{
		P1OUT | = LED1 + LED2;
		P1OUT & = ~ (LED1 + LED2); 
		
		P1OUT | = LED1 + LED2;
		P1OUT & = ~ (LED1 + LED2); 
	}
	
	Void  main ( void )
	{
		WDTCTL = WDTPW | WDTHOLD;
		P1DIR = LED1 + LED2;
		P1OUT = 0 ;
		Para (;;)
		{
			Pisca2 ();
		}
	};

6. Reescreva o código da questão 3 usando a função da questão 4.
# Incluem  < msp430g2553.h >
	# Define  BTN BIT2
	# Define  LED1 BIT0
	# Define  LED2 BIT6
	
	anular  Pisca2 ()
	{
		P1OUT | = LED1 + LED2;
		P1OUT & = ~ (LED1 + LED2); 
		
		P1OUT | = LED1 + LED2;
		P1OUT & = ~ (LED1 + LED2); 
	}
	
	Void  main ( void )
	{
		WDTCTL = WDTPW | WDTHOLD;
		P1DIR = LED1 + LED2;
		P1OUT = 0 ;
		Para (;;)
		{
			se (P1IN & BTN == 0 ) 
			{
				Pisca2 ();
				
				Enquanto (P1IN & BTN == 0 ) {} 
			outro
				P1OUT & = ~ (LED1 + LED2); 
		}
	};
